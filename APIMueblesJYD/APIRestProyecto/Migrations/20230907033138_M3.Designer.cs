// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace APIRestProyecto.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230907033138_M3")]
    partial class M3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Cargo", b =>
                {
                    b.Property<Guid>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CargoId");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("NombreCargo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("CargoId");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            CargoId = new Guid("5e74a02d-a99f-40e3-8c4c-a4c58a78ad04"),
                            Estado = 1,
                            NombreCargo = "Carpintero"
                        },
                        new
                        {
                            CargoId = new Guid("24254ac3-4379-41ba-ab1d-d4c31ffc4855"),
                            Estado = 1,
                            NombreCargo = "Diseñador de Muebles"
                        },
                        new
                        {
                            CargoId = new Guid("1cb1de39-40fe-472b-bdb7-d37db36387fb"),
                            Estado = 1,
                            NombreCargo = "Vendedor de Muebles"
                        },
                        new
                        {
                            CargoId = new Guid("201b4cc5-5647-44b8-8664-08f49c8ebcf6"),
                            Estado = 1,
                            NombreCargo = "Técnico de Acabados"
                        },
                        new
                        {
                            CargoId = new Guid("8d9b73ec-049b-483a-8d48-36e29c25021e"),
                            Estado = 1,
                            NombreCargo = "Asistente de carpinteria"
                        });
                });

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCategoria");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("dd412b15-5220-43cd-90a8-228827cd4988"),
                            Estado = 1,
                            Nombre = "Muebles"
                        },
                        new
                        {
                            IdCategoria = new Guid("0e371e3e-50c3-48c5-a583-db1016fb209c"),
                            Estado = 1,
                            Nombre = "Camas"
                        },
                        new
                        {
                            IdCategoria = new Guid("8a10a022-bcac-4d4a-9926-a2b4ba8bc993"),
                            Estado = 1,
                            Nombre = "Mesas de Noche"
                        },
                        new
                        {
                            IdCategoria = new Guid("c48f9793-637f-4f19-ac65-0cc5ecebcfd8"),
                            Estado = 1,
                            Nombre = "Comedores"
                        },
                        new
                        {
                            IdCategoria = new Guid("3be4073a-8614-400e-bdce-2730059d9e76"),
                            Estado = 1,
                            Nombre = "Escritorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("2c9308f6-b13f-4714-b8c0-6b24d9b97389"),
                            Estado = 1,
                            Nombre = "Sillas"
                        },
                        new
                        {
                            IdCategoria = new Guid("21c0ab55-caf3-4636-882b-741d1fa2e352"),
                            Estado = 1,
                            Nombre = "Armarios"
                        },
                        new
                        {
                            IdCategoria = new Guid("1ec8da08-607c-442c-82bd-2671992c080f"),
                            Estado = 1,
                            Nombre = "Camarotes"
                        });
                });

            modelBuilder.Entity("Entities.Models.ContactoEmpleado", b =>
                {
                    b.Property<Guid>("IdContactoEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdContactoEmpleado");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdContactoEmpleado");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("ContactoEmpleados");

                    b.HasData(
                        new
                        {
                            IdContactoEmpleado = new Guid("319b841c-0573-416a-8754-fcd82aee04bc"),
                            Direccion = "Cra15B #13-52",
                            Email = "ContactoE1@gmail.com",
                            EmpleadoId = new Guid("41fff2b6-9886-40bc-ab38-d34cfaae3f96"),
                            FechaCreacion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefono = 312546845
                        },
                        new
                        {
                            IdContactoEmpleado = new Guid("07b892ef-0511-4cf4-b2c6-9cc4932418dd"),
                            Direccion = "Av. 7 de Septiembre #25-10",
                            Email = "ContactoE2@gmail.com",
                            EmpleadoId = new Guid("1f03e9da-4f5a-4c01-a74b-5484a0622a88"),
                            FechaCreacion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefono = 315874920
                        },
                        new
                        {
                            IdContactoEmpleado = new Guid("66a5c506-ca79-4323-9826-2719d047d961"),
                            Direccion = "Calle 24 #18-15",
                            Email = "ContactoE3@gmail.com",
                            EmpleadoId = new Guid("aad28fbf-f3e8-43b2-97d4-9eab3d59597a"),
                            FechaCreacion = new DateTime(2023, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefono = 318657489
                        },
                        new
                        {
                            IdContactoEmpleado = new Guid("e385b218-e55b-4c17-ae51-58fa9343483e"),
                            Direccion = "Cra 10A #5-30",
                            Email = "ContactoE4@gmail.com",
                            EmpleadoId = new Guid("06e66a66-1840-4a55-abcf-475e8218963f"),
                            FechaCreacion = new DateTime(2023, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefono = 314985632
                        },
                        new
                        {
                            IdContactoEmpleado = new Guid("6215be00-b0a6-4df5-bf6f-481f8089c441"),
                            Direccion = "Cra 20 #8-45",
                            Email = "ContactoE5@gmail.com",
                            EmpleadoId = new Guid("da511896-b59c-4052-9103-6bf83a9f4b0a"),
                            FechaCreacion = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Telefono = 317654987
                        });
                });

            modelBuilder.Entity("Entities.Models.ContactoProveedor", b =>
                {
                    b.Property<Guid>("IdContactoProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdContactoProveedor");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreProv")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("IdContactoProveedor");

                    b.HasIndex("IdProveedor");

                    b.ToTable("ContactoProveedorConfigurations");

                    b.HasData(
                        new
                        {
                            IdContactoProveedor = new Guid("11b72f91-f5a9-4e6a-8c48-624a0729941d"),
                            Email = "ContactP1@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2020, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("d0a22af1-85b2-4ea6-9daa-d0e321c07964"),
                            NombreProv = "Sam Raiden",
                            Telefono = 314526948
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("42dc025f-3e80-4768-930d-6ef208faac3e"),
                            Email = "ContactP2@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2022, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("6e6d4c81-9958-44ff-bf39-838a4940c822"),
                            NombreProv = "Laura Montoya",
                            Telefono = 310987654
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("6299ae61-9578-4898-a9d6-8697a84b9c84"),
                            Email = "ContactP3@gmail.com",
                            Estado = 2,
                            FechaAlta = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("303504ff-9312-4d2b-9d52-8d16ef08eb69"),
                            NombreProv = "Carlos Rivera",
                            Telefono = 317895623
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("d6e22b76-d99f-4376-9dee-b542ee7aa729"),
                            Email = "ContactP4@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("0dd8f80d-4df6-4fe9-bb72-28c7f5561e7c"),
                            NombreProv = "Elena Gómez",
                            Telefono = 312589764
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("aaec0a58-444b-48bc-9291-6aaa50f27008"),
                            Email = "ContactP5@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2022, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("be2c0877-d46b-46e3-b793-cb5711f214c7"),
                            NombreProv = "Ana Martínez",
                            Telefono = 319875634
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("136ad92b-614d-41fa-90d7-1f0f4a6c6d6e"),
                            Email = "ContactP6@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2021, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("9abc8d3b-3bd1-49c3-84e2-35c59447b0f3"),
                            NombreProv = "Juan Soto",
                            Telefono = 316547896
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("8a91ebd3-d855-4be0-af6d-5dd91d3a4811"),
                            Email = "ContactP7@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2020, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("7a1429e1-c547-4f00-a33a-d27d402bca3f"),
                            NombreProv = "María Salas",
                            Telefono = 318564237
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("35ce9ea9-6aed-459e-9fde-c02b768ddbec"),
                            Email = "ContactP8@gmail.com",
                            Estado = 2,
                            FechaAlta = new DateTime(2021, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("e630fb8f-a34d-4b4d-9de1-6808fe6a6edf"),
                            NombreProv = "Luis Gutiérrez",
                            Telefono = 313258741
                        },
                        new
                        {
                            IdContactoProveedor = new Guid("6f562b34-cee6-4684-be79-4a3638de30f0"),
                            Email = "ContactP9@gmail.com",
                            Estado = 1,
                            FechaAlta = new DateTime(2022, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaBaja = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("7f740088-b8c7-4094-90b3-9c6385e58597"),
                            NombreProv = "Fernando López",
                            Telefono = 317896542
                        });
                });

            modelBuilder.Entity("Entities.Models.ContactoUsuario", b =>
                {
                    b.Property<Guid>("IdContactoCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdContactoCliente");

                    b.Property<string>("Barrio_Localidad")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IndicativoCiudad")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("NumeroTelefonico")
                        .HasColumnType("int");

                    b.Property<string>("TipoTelefono")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdContactoCliente");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ContactoUsuarioConfigurations");

                    b.HasData(
                        new
                        {
                            IdContactoCliente = new Guid("03b22d58-4a3d-4ab1-93d3-143686897a49"),
                            Barrio_Localidad = "Usme",
                            Ciudad = "Bogotá D.C.",
                            Direccion = "Cra 12C #53-08",
                            Email = "ContactoC1@gmail.com",
                            IdUsuario = new Guid("1449f86e-3988-43c6-9210-252136156e7e"),
                            IndicativoCiudad = "601",
                            NumeroTelefonico = 5614248,
                            TipoTelefono = "Fijo"
                        },
                        new
                        {
                            IdContactoCliente = new Guid("9d1a4bd6-e6eb-40bd-8333-a8745c90ae58"),
                            Barrio_Localidad = "El Poblado",
                            Ciudad = "Medellín",
                            Direccion = "Av. 7 de Septiembre #25-10",
                            Email = "ContactoC2@gmail.com",
                            IdUsuario = new Guid("e0aac839-d3e4-4b5c-9b6e-dbf0303db2b2"),
                            IndicativoCiudad = "301",
                            NumeroTelefonico = 315874920,
                            TipoTelefono = "Celular"
                        },
                        new
                        {
                            IdContactoCliente = new Guid("06dc8c36-d46e-4eb1-97d5-92355ba32b9f"),
                            Barrio_Localidad = "San Fernando",
                            Ciudad = "Cali",
                            Direccion = "Calle 24 #18-15",
                            Email = "ContactoC3@gmail.com",
                            IdUsuario = new Guid("58d04fc7-e269-4e8b-aea4-3f6da3fea9bc"),
                            IndicativoCiudad = "571",
                            NumeroTelefonico = 317895623,
                            TipoTelefono = "Fijo"
                        },
                        new
                        {
                            IdContactoCliente = new Guid("9f355a72-89f6-47c8-aaab-931e4d5d40a5"),
                            Barrio_Localidad = "Granada",
                            Ciudad = "Cali",
                            Direccion = "Cra 10A #5-30",
                            Email = "ContactoC4@gmail.com",
                            IdUsuario = new Guid("e5f2abb9-bcd0-422b-9e8c-9597bb21bec1"),
                            IndicativoCiudad = "571",
                            NumeroTelefonico = 318564237,
                            TipoTelefono = "Celular"
                        });
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCompra", b =>
                {
                    b.Property<Guid>("DetalleacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleacturaCompraId");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaCompraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleacturaCompraId");

                    b.HasIndex("FacturaCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleFacturaCompra");

                    b.HasData(
                        new
                        {
                            DetalleacturaCompraId = new Guid("ab7dcddf-f549-4ae2-9c0d-e2237b831f76"),
                            Cantidad = 2,
                            FacturaCompraId = new Guid("5c5b2abf-5de1-49cb-98b8-6c13fddc7a6e"),
                            IVA = 0.3f,
                            ProductoId = new Guid("ce7dc2ea-5931-49a1-8946-9782a5843612"),
                            ValorDescuento = 0.05f,
                            ValorUnitario = 250000f
                        },
                        new
                        {
                            DetalleacturaCompraId = new Guid("5aec0acf-8b05-40bb-a874-c244487b56af"),
                            Cantidad = 4,
                            FacturaCompraId = new Guid("6e922ba7-f823-4a3b-81ef-65a55a981c60"),
                            IVA = 0.3f,
                            ProductoId = new Guid("30d27e06-251c-4911-819a-59a9a3966f78"),
                            ValorDescuento = 0.05f,
                            ValorUnitario = 500000f
                        });
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaVenta", b =>
                {
                    b.Property<Guid>("DetalleFacturaVentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleFacturaVentaID");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleFacturaVentaID");

                    b.HasIndex("FacturaVentaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesFacturaVentas");

                    b.HasData(
                        new
                        {
                            DetalleFacturaVentaID = new Guid("636e9434-f3aa-44d1-9ef0-8470d72a5bee"),
                            Cantidad = 2,
                            FacturaVentaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            IVA = 8075f,
                            ProductoId = new Guid("dd6b62dc-f917-4379-9955-1c244ee78c4b"),
                            ValorDescuento = 0f,
                            ValorUnitario = 42500f
                        },
                        new
                        {
                            DetalleFacturaVentaID = new Guid("21980b54-0dd3-46b0-b77a-29eb80caa3c8"),
                            Cantidad = 2,
                            FacturaVentaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            IVA = 1534f,
                            ProductoId = new Guid("edf59c51-6384-422f-b941-ce879c82dcdc"),
                            ValorDescuento = 0f,
                            ValorUnitario = 60000f
                        });
                });

            modelBuilder.Entity("Entities.Models.Empleado", b =>
                {
                    b.Property<Guid>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmpleadoId");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("EmpleadoId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = new Guid("41fff2b6-9886-40bc-ab38-d34cfaae3f96"),
                            Apellidos = "González",
                            Estado = 1,
                            FechaNacimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Ana María",
                            Sexo = "Femenino"
                        },
                        new
                        {
                            EmpleadoId = new Guid("1f03e9da-4f5a-4c01-a74b-5484a0622a88"),
                            Apellidos = "Ramírez",
                            Estado = 1,
                            FechaNacimiento = new DateTime(1987, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Carlos Alberto",
                            Sexo = "Masculino"
                        },
                        new
                        {
                            EmpleadoId = new Guid("aad28fbf-f3e8-43b2-97d4-9eab3d59597a"),
                            Apellidos = "López",
                            Estado = 1,
                            FechaNacimiento = new DateTime(1999, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Laura",
                            Sexo = "Femenino"
                        },
                        new
                        {
                            EmpleadoId = new Guid("06e66a66-1840-4a55-abcf-475e8218963f"),
                            Apellidos = "Hernández",
                            Estado = 1,
                            FechaNacimiento = new DateTime(1983, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "Roberto",
                            Sexo = "Masculino"
                        },
                        new
                        {
                            EmpleadoId = new Guid("da511896-b59c-4052-9103-6bf83a9f4b0a"),
                            Apellidos = "Martínez",
                            Estado = 1,
                            FechaNacimiento = new DateTime(2001, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombres = "María José",
                            Sexo = "Femenino"
                        });
                });

            modelBuilder.Entity("Entities.Models.EmpleadoCargo", b =>
                {
                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaFin")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumeroContrato")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("int");

                    b.HasKey("EmpleadoId", "CargoId");

                    b.HasIndex("CargoId");

                    b.ToTable("EmpleadoCargos");

                    b.HasData(
                        new
                        {
                            EmpleadoId = new Guid("41fff2b6-9886-40bc-ab38-d34cfaae3f96"),
                            CargoId = new Guid("5e74a02d-a99f-40e3-8c4c-a4c58a78ad04"),
                            FechaFin = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroContrato = 1
                        },
                        new
                        {
                            EmpleadoId = new Guid("1f03e9da-4f5a-4c01-a74b-5484a0622a88"),
                            CargoId = new Guid("1cb1de39-40fe-472b-bdb7-d37db36387fb"),
                            FechaFin = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroContrato = 2
                        },
                        new
                        {
                            EmpleadoId = new Guid("aad28fbf-f3e8-43b2-97d4-9eab3d59597a"),
                            CargoId = new Guid("24254ac3-4379-41ba-ab1d-d4c31ffc4855"),
                            FechaFin = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2005, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroContrato = 3
                        },
                        new
                        {
                            EmpleadoId = new Guid("06e66a66-1840-4a55-abcf-475e8218963f"),
                            CargoId = new Guid("8d9b73ec-049b-483a-8d48-36e29c25021e"),
                            FechaFin = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2012, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroContrato = 4
                        },
                        new
                        {
                            EmpleadoId = new Guid("da511896-b59c-4052-9103-6bf83a9f4b0a"),
                            CargoId = new Guid("201b4cc5-5647-44b8-8664-08f49c8ebcf6"),
                            FechaFin = new DateTime(2018, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2010, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumeroContrato = 5
                        });
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.Property<Guid>("FacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaCompraId");

                    b.Property<DateTime?>("FechaExpedicion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaGeneracion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NFactura")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProveedoresIdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalBruto")
                        .HasColumnType("real");

                    b.Property<float>("TotalIVA")
                        .HasColumnType("real");

                    b.Property<float>("TotalPago")
                        .HasColumnType("real");

                    b.Property<float>("TotalRefuete")
                        .HasColumnType("real");

                    b.HasKey("FacturaCompraId");

                    b.HasIndex("ProveedoresIdProveedor");

                    b.ToTable("FacturasCompras");

                    b.HasData(
                        new
                        {
                            FacturaCompraId = new Guid("5c5b2abf-5de1-49cb-98b8-6c13fddc7a6e"),
                            FechaExpedicion = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("9abc8d3b-3bd1-49c3-84e2-35c59447b0f3"),
                            NFactura = 1,
                            TotalBruto = 100000f,
                            TotalIVA = 19000f,
                            TotalPago = 139000f,
                            TotalRefuete = 20000f
                        },
                        new
                        {
                            FacturaCompraId = new Guid("6e922ba7-f823-4a3b-81ef-65a55a981c60"),
                            FechaExpedicion = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2000, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("6e6d4c81-9958-44ff-bf39-838a4940c822"),
                            NFactura = 2,
                            TotalBruto = 150000f,
                            TotalIVA = 2850f,
                            TotalPago = 182850f,
                            TotalRefuete = 30000f
                        });
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.Property<Guid>("FacturaVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaVentaId");

                    b.Property<DateTime?>("FechaExpedicion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaGeneracion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NFactura")
                        .HasColumnType("int");

                    b.Property<float>("TotalBruto")
                        .HasColumnType("real");

                    b.Property<float>("TotalIVA")
                        .HasColumnType("real");

                    b.Property<float>("TotalPago")
                        .HasColumnType("real");

                    b.Property<float>("TotalRefuete")
                        .HasColumnType("real");

                    b.Property<Guid?>("UsuariosIdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FacturaVentaId");

                    b.HasIndex("UsuariosIdUsuario");

                    b.ToTable("FacturasVentas");

                    b.HasData(
                        new
                        {
                            FacturaVentaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            FechaExpedicion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUsuario = new Guid("e0aac839-d3e4-4b5c-9b6e-dbf0303db2b2"),
                            NFactura = 1,
                            TotalBruto = 85000f,
                            TotalIVA = 16150f,
                            TotalPago = 113150f,
                            TotalRefuete = 12000f
                        },
                        new
                        {
                            FacturaVentaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            FechaExpedicion = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdUsuario = new Guid("1449f86e-3988-43c6-9210-252136156e7e"),
                            NFactura = 2,
                            TotalBruto = 120000f,
                            TotalIVA = 22800f,
                            TotalPago = 157800f,
                            TotalRefuete = 15000f
                        });
                });

            modelBuilder.Entity("Entities.Models.HistoricoPrecios", b =>
                {
                    b.Property<Guid>("IdHistoricoPrecios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdHistoricoPrecios");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPrecioFinal")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaPrecioInicial")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<float>("PrecioVenta")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdHistoricoPrecios");

                    b.HasIndex("ProductoId");

                    b.ToTable("HistoricosPrecios");

                    b.HasData(
                        new
                        {
                            IdHistoricoPrecios = new Guid("2cdc7499-0d1e-4413-9565-9d337d612b45"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 42500f,
                            ProductoId = new Guid("edf59c51-6384-422f-b941-ce879c82dcdc")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("74604bcd-34f7-4bbc-90da-cd955c2a5117"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 60000f,
                            ProductoId = new Guid("dd6b62dc-f917-4379-9955-1c244ee78c4b")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("0db01178-1ee0-4b73-9e6c-fb51972517ec"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 38500f,
                            ProductoId = new Guid("5650a477-c720-4438-8dd4-44bc58e5cdda")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("5d3d5dc3-fbe5-43ea-875b-3447e32c9e52"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 50000f,
                            ProductoId = new Guid("ce7dc2ea-5931-49a1-8946-9782a5843612")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("6549ac0e-d34b-43b3-9fed-9847a2b17149"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 70000f,
                            ProductoId = new Guid("3fa14058-d693-4ba9-8b10-f242599f40ea")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("1c230e78-c12c-4bd8-a4b1-ca7fbc2d0549"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 55000f,
                            ProductoId = new Guid("8b538521-a513-4f5a-b4e6-ae3c57912499")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("a8cb8414-2308-4f71-a09a-6976dd23f396"),
                            Estado = 1,
                            FechaPrecioFinal = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrecioInicial = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrecioVenta = 42000f,
                            ProductoId = new Guid("30d27e06-251c-4911-819a-59a9a3966f78")
                        });
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.Property<Guid>("IdMetodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdMetodoPago");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombrePlataforma")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("IdMetodoPago");

                    b.HasIndex("FacturaVentaId");

                    b.ToTable("MetodoPagos");

                    b.HasData(
                        new
                        {
                            IdMetodoPago = new Guid("5ef90d94-ca4a-49fe-ba78-e42e1c527606"),
                            FacturaVentaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            FechaTransaccion = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombrePlataforma = "Nequi",
                            Tipo = 2
                        },
                        new
                        {
                            IdMetodoPago = new Guid("37292a3a-0a69-41a5-a038-1795fa541cf9"),
                            FacturaVentaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            FechaTransaccion = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombrePlataforma = "Daviplata",
                            Tipo = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Perdida", b =>
                {
                    b.Property<Guid>("IdPerdida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPerdida");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPerdida")
                        .HasColumnType("datetime2");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("IdPerdida");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Perdida");

                    b.HasData(
                        new
                        {
                            IdPerdida = new Guid("5ffa39ba-fd0e-4556-aebc-c62d3fcc0823"),
                            EmpleadoId = new Guid("41fff2b6-9886-40bc-ab38-d34cfaae3f96"),
                            Estado = 1,
                            FechaPerdida = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 300000f
                        },
                        new
                        {
                            IdPerdida = new Guid("556e454f-6ae9-4996-8344-95bd3c76ad36"),
                            EmpleadoId = new Guid("1f03e9da-4f5a-4c01-a74b-5484a0622a88"),
                            Estado = 2,
                            FechaPerdida = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 200000f
                        },
                        new
                        {
                            IdPerdida = new Guid("2dabb8f6-c2ef-4c37-8b6d-3f306241d100"),
                            EmpleadoId = new Guid("aad28fbf-f3e8-43b2-97d4-9eab3d59597a"),
                            Estado = 2,
                            FechaPerdida = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 350000f
                        },
                        new
                        {
                            IdPerdida = new Guid("42f9ca61-b335-421b-bc21-de794a40aed0"),
                            EmpleadoId = new Guid("06e66a66-1840-4a55-abcf-475e8218963f"),
                            Estado = 1,
                            FechaPerdida = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 500000f
                        },
                        new
                        {
                            IdPerdida = new Guid("0a730c0e-c85f-4765-974c-cafc13ac4f57"),
                            EmpleadoId = new Guid("da511896-b59c-4052-9103-6bf83a9f4b0a"),
                            Estado = 1,
                            FechaPerdida = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 100000f
                        });
                });

            modelBuilder.Entity("Entities.Models.PerdidaProducto", b =>
                {
                    b.Property<Guid>("IdPerdida")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PerdidaProductoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PerdidaProductoId");

                    b.Property<float>("PrecioUnitario")
                        .HasColumnType("real");

                    b.HasKey("IdPerdida", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Perdida_Productos");

                    b.HasData(
                        new
                        {
                            IdPerdida = new Guid("5ffa39ba-fd0e-4556-aebc-c62d3fcc0823"),
                            ProductoId = new Guid("ce7dc2ea-5931-49a1-8946-9782a5843612"),
                            Cantidad = 5,
                            Motivo = "Robo",
                            PerdidaProductoId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PrecioUnitario = 300000f
                        },
                        new
                        {
                            IdPerdida = new Guid("556e454f-6ae9-4996-8344-95bd3c76ad36"),
                            ProductoId = new Guid("dd6b62dc-f917-4379-9955-1c244ee78c4b"),
                            Cantidad = 5,
                            Motivo = "Roto",
                            PerdidaProductoId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PrecioUnitario = 200000f
                        },
                        new
                        {
                            IdPerdida = new Guid("2dabb8f6-c2ef-4c37-8b6d-3f306241d100"),
                            ProductoId = new Guid("edf59c51-6384-422f-b941-ce879c82dcdc"),
                            Cantidad = 5,
                            Motivo = "Mal Estado",
                            PerdidaProductoId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PrecioUnitario = 350000f
                        },
                        new
                        {
                            IdPerdida = new Guid("42f9ca61-b335-421b-bc21-de794a40aed0"),
                            ProductoId = new Guid("30d27e06-251c-4911-819a-59a9a3966f78"),
                            Cantidad = 5,
                            Motivo = "Daño",
                            PerdidaProductoId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PrecioUnitario = 500000f
                        },
                        new
                        {
                            IdPerdida = new Guid("0a730c0e-c85f-4765-974c-cafc13ac4f57"),
                            ProductoId = new Guid("8b538521-a513-4f5a-b4e6-ae3c57912499"),
                            Cantidad = 5,
                            Motivo = "Perdida",
                            PerdidaProductoId = new Guid("00000000-0000-0000-0000-000000000000"),
                            PrecioUnitario = 100000f
                        });
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductoId");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("OrigenMateriaPrima")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("ProductoId");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = new Guid("edf59c51-6384-422f-b941-ce879c82dcdc"),
                            Color = "Blanco",
                            Descripcion = "Cama doble de madera",
                            Estado = 1,
                            IdCategoria = new Guid("0e371e3e-50c3-48c5-a583-db1016fb209c"),
                            Nombre = "Cama doble",
                            Precio = 60000f,
                            Stock = 3,
                            Tipo = 2
                        },
                        new
                        {
                            ProductoId = new Guid("dd6b62dc-f917-4379-9955-1c244ee78c4b"),
                            Color = "Negro",
                            Descripcion = "Mesa de noche de estilo moderno",
                            Estado = 1,
                            IdCategoria = new Guid("8a10a022-bcac-4d4a-9926-a2b4ba8bc993"),
                            Nombre = "Mesa de noche",
                            Precio = 42500f,
                            Stock = 5,
                            Tipo = 2
                        },
                        new
                        {
                            ProductoId = new Guid("5650a477-c720-4438-8dd4-44bc58e5cdda"),
                            Color = "Marrón",
                            Descripcion = "Comedor de madera con capacidad para 6 personas",
                            Estado = 1,
                            IdCategoria = new Guid("c48f9793-637f-4f19-ac65-0cc5ecebcfd8"),
                            Nombre = "Comedor extensible",
                            Precio = 800000f,
                            Stock = 2,
                            Tipo = 1
                        },
                        new
                        {
                            ProductoId = new Guid("ce7dc2ea-5931-49a1-8946-9782a5843612"),
                            Color = "Gris",
                            Descripcion = "Silla cómoda con soporte lumbar",
                            Estado = 1,
                            IdCategoria = new Guid("2c9308f6-b13f-4714-b8c0-6b24d9b97389"),
                            Nombre = "Silla ergonómica",
                            Precio = 250000f,
                            Stock = 8,
                            Tipo = 2
                        },
                        new
                        {
                            ProductoId = new Guid("3fa14058-d693-4ba9-8b10-f242599f40ea"),
                            Color = "Blanco",
                            Descripcion = "Escritorio de diseño minimalista",
                            Estado = 1,
                            IdCategoria = new Guid("3be4073a-8614-400e-bdce-2730059d9e76"),
                            Nombre = "Escritorio moderno",
                            Precio = 350000f,
                            Stock = 4,
                            Tipo = 1
                        },
                        new
                        {
                            ProductoId = new Guid("8b538521-a513-4f5a-b4e6-ae3c57912499"),
                            Color = "Café",
                            Descripcion = "Armario espacioso con compartimentos",
                            Estado = 1,
                            IdCategoria = new Guid("21c0ab55-caf3-4636-882b-741d1fa2e352"),
                            Nombre = "Armario de 4 puertas",
                            Precio = 700000f,
                            Stock = 1,
                            Tipo = 1
                        },
                        new
                        {
                            ProductoId = new Guid("30d27e06-251c-4911-819a-59a9a3966f78"),
                            Color = "Azul",
                            Descripcion = "Camarote con temática de caricaturas",
                            Estado = 1,
                            IdCategoria = new Guid("1ec8da08-607c-442c-82bd-2671992c080f"),
                            Nombre = "Camarote infantil",
                            Precio = 450000f,
                            Stock = 6,
                            Tipo = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Property<Guid>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdProveedor");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            IdProveedor = new Guid("d0a22af1-85b2-4ea6-9daa-d0e321c07964"),
                            Estado = 1,
                            RazonSocial = "La Guitarra, S.A"
                        },
                        new
                        {
                            IdProveedor = new Guid("6e6d4c81-9958-44ff-bf39-838a4940c822"),
                            Estado = 1,
                            RazonSocial = "Sol Dorado"
                        },
                        new
                        {
                            IdProveedor = new Guid("303504ff-9312-4d2b-9d52-8d16ef08eb69"),
                            Estado = 1,
                            RazonSocial = "Marena"
                        },
                        new
                        {
                            IdProveedor = new Guid("0dd8f80d-4df6-4fe9-bb72-28c7f5561e7c"),
                            Estado = 1,
                            RazonSocial = "Juguetes Vikingos"
                        },
                        new
                        {
                            IdProveedor = new Guid("be2c0877-d46b-46e3-b793-cb5711f214c7"),
                            Estado = 2,
                            RazonSocial = "Lima & Álvarez"
                        },
                        new
                        {
                            IdProveedor = new Guid("9abc8d3b-3bd1-49c3-84e2-35c59447b0f3"),
                            Estado = 1,
                            RazonSocial = "Arcos Dorados, C.A"
                        },
                        new
                        {
                            IdProveedor = new Guid("7a1429e1-c547-4f00-a33a-d27d402bca3f"),
                            Estado = 1,
                            RazonSocial = "Carlos Fernández, E.I.R"
                        },
                        new
                        {
                            IdProveedor = new Guid("e630fb8f-a34d-4b4d-9de1-6808fe6a6edf"),
                            Estado = 1,
                            RazonSocial = "Chascomús, S.A"
                        },
                        new
                        {
                            IdProveedor = new Guid("7f740088-b8c7-4094-90b3-9c6385e58597"),
                            Estado = 2,
                            RazonSocial = "Grupo Fernández S.A"
                        });
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdUsuario");

                    b.Property<string>("Cargo")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Contrasena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaContrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Llave")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("NumDocumento")
                        .HasColumnType("int");

                    b.Property<string>("PrimApellido")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PrimNombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SegApellido")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SegNombre")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            IdUsuario = new Guid("1449f86e-3988-43c6-9210-252136156e7e"),
                            Cargo = "Administrador",
                            Contrasena = "",
                            Estado = 1,
                            FechaContrato = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaFin = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(2000, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Llave = "ADSO2558108",
                            NumDocumento = 1019762822,
                            PrimApellido = "Marin",
                            PrimNombre = "Kevin",
                            SegApellido = "Hoyos",
                            SegNombre = "Alejandro",
                            Sexo = "Masculino",
                            TipoDocumento = "C.C",
                            TipoUsuario = 1
                        },
                        new
                        {
                            IdUsuario = new Guid("fd1820f2-b0f0-47a0-af34-d6d465734f65"),
                            Cargo = "Carpintero",
                            Contrasena = "",
                            Estado = 1,
                            FechaContrato = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaFin = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(2000, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Llave = "ADSO2558108",
                            NumDocumento = 1013100300,
                            PrimApellido = "Sarmiento",
                            PrimNombre = "Miguel",
                            SegApellido = "Mojica",
                            SegNombre = "Angel",
                            Sexo = "Masculino",
                            TipoDocumento = "C.C",
                            TipoUsuario = 1
                        },
                        new
                        {
                            IdUsuario = new Guid("e0aac839-d3e4-4b5c-9b6e-dbf0303db2b2"),
                            Cargo = "Supervisor de Producción",
                            Contrasena = "",
                            Estado = 1,
                            FechaContrato = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaFin = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(2000, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Llave = "ADSO2558108",
                            NumDocumento = 1025445665,
                            PrimApellido = "Ramirez",
                            PrimNombre = "David",
                            SegApellido = "Martin",
                            SegNombre = "Felipe",
                            Sexo = "Masculino",
                            TipoDocumento = "C.C",
                            TipoUsuario = 1
                        },
                        new
                        {
                            IdUsuario = new Guid("58d04fc7-e269-4e8b-aea4-3f6da3fea9bc"),
                            Cargo = "Asistente de carpinteria",
                            Contrasena = "",
                            Estado = 1,
                            FechaContrato = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaFin = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(2000, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Llave = "ADSO2558108",
                            NumDocumento = 1013265449,
                            PrimApellido = "Velez",
                            PrimNombre = "Maria",
                            SegApellido = "Wedderburn",
                            SegNombre = "Fernanda",
                            Sexo = "Femenino",
                            TipoDocumento = "C.C",
                            TipoUsuario = 1
                        },
                        new
                        {
                            IdUsuario = new Guid("e5f2abb9-bcd0-422b-9e8c-9597bb21bec1"),
                            Cargo = "Encargado de almacén",
                            Contrasena = "",
                            Estado = 1,
                            FechaContrato = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaFin = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(2000, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaRegistro = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Llave = "ADSO2558108",
                            NumDocumento = 1016598778,
                            PrimApellido = "Rivera",
                            PrimNombre = "Lizeth",
                            SegApellido = "Ruiz",
                            SegNombre = "Valeria",
                            Sexo = "Femenino",
                            TipoDocumento = "C.C",
                            TipoUsuario = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.ContactoEmpleado", b =>
                {
                    b.HasOne("Entities.Models.Empleado", "Empleado")
                        .WithMany("ContactoEmpleados")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Entities.Models.ContactoProveedor", b =>
                {
                    b.HasOne("Entities.Models.Proveedor", "Proveedor")
                        .WithMany("contactoProveedors")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Entities.Models.ContactoUsuario", b =>
                {
                    b.HasOne("Entities.Models.Usuario", "Usuario")
                        .WithMany("contactoUsuarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCompra", b =>
                {
                    b.HasOne("Entities.Models.FacturaCompra", "FacturaCompra")
                        .WithMany("DetalleFacturaCompras")
                        .HasForeignKey("FacturaCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("detalleFacturaCompras")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaVenta", b =>
                {
                    b.HasOne("Entities.Models.FacturaVenta", "FacturasVenta")
                        .WithMany()
                        .HasForeignKey("FacturaVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("detalleFacturaVentas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturasVenta");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.EmpleadoCargo", b =>
                {
                    b.HasOne("Entities.Models.Cargo", "Cargos")
                        .WithMany("EmpleadoCargos")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Empleado", "Empleado")
                        .WithMany("Empleados_Cargos")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargos");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.HasOne("Entities.Models.Proveedor", "Proveedores")
                        .WithMany("facturaCompras")
                        .HasForeignKey("ProveedoresIdProveedor");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.HasOne("Entities.Models.Usuario", "Usuarios")
                        .WithMany("facturaVentas")
                        .HasForeignKey("UsuariosIdUsuario");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Models.HistoricoPrecios", b =>
                {
                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("HistoricoPrecios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.HasOne("Entities.Models.FacturaVenta", "FacturaVenta")
                        .WithMany("MetodoPago")
                        .HasForeignKey("FacturaVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaVenta");
                });

            modelBuilder.Entity("Entities.Models.Perdida", b =>
                {
                    b.HasOne("Entities.Models.Empleado", "Empleado")
                        .WithMany("Perdidas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Entities.Models.PerdidaProducto", b =>
                {
                    b.HasOne("Entities.Models.Perdida", "Perdida")
                        .WithMany("perdida_Productos")
                        .HasForeignKey("IdPerdida")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("perdida_Productos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perdida");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.HasOne("Entities.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Entities.Models.Cargo", b =>
                {
                    b.Navigation("EmpleadoCargos");
                });

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Entities.Models.Empleado", b =>
                {
                    b.Navigation("ContactoEmpleados");

                    b.Navigation("Empleados_Cargos");

                    b.Navigation("Perdidas");
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.Navigation("DetalleFacturaCompras");
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Entities.Models.Perdida", b =>
                {
                    b.Navigation("perdida_Productos");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Navigation("HistoricoPrecios");

                    b.Navigation("detalleFacturaCompras");

                    b.Navigation("detalleFacturaVentas");

                    b.Navigation("perdida_Productos");
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Navigation("contactoProveedors");

                    b.Navigation("facturaCompras");
                });

            modelBuilder.Entity("Entities.Models.Usuario", b =>
                {
                    b.Navigation("contactoUsuarios");

                    b.Navigation("facturaVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
